year() %>%
paste0(.,"-08-01") %>%
as.POSIXct() %>%
rep(.-1, 2)
date_limits[2] <- date_limits[2] + 365*24*3600
obs_days_complete %>%
filter(ywint == ywint_lim) %>%
ggplot(aes(x = Date,
y = spent_tavg,
color = gas_left
)) +
theme_bw() +
# color scale until 0
scale_color_gradient(high = "blue", low = "green"
, limits = c(0,1730)
) +
geom_line(linewidth=1.5) +
geom_line(aes(y = spent_tavg_left_mean), color = "grey50",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y =  spent_tavg_left_lwr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_upr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_jan), color = "salmon4",
linetype="solid", linewidth = 1.2) +
scale_y_continuous(limits = c(0, 1)) +
# date scale (posixct) 1 year
scale_x_datetime(date_breaks = "1 month", date_labels = "%b",
limits = date_limits) +
labs( x = "", y = "Average gas consumption m3/°C")
binom.test(100,115,p=.8)
100/115
binom.test(110,115,p=.8)
binom.test(107,115,p=.8)
binom.test(106,115,p=.8)
113/0.9
150/0.9
library(nlme)
library(splines)
source( here::here( "inst", "function", "load_stuff.r"))
merge_transform_weather( data_dir = "inst/extdata/meteostat_data",
gaz_dir  = "inst/extdata/gaz.xlsx",
output_file = "data/meteostat_data.Rdata")
act_year <- 2024
# which is current 'ywint'
act_ywint <- obs_days %>%
ungroup() %>%
mutate(ywint = as.numeric(ywint)) %>%
filter( year(Date) == act_year) %>%
mutate(ywint = max(ywint)) %>%
slice(1) %>%
pull(ywint)
get_approx_meter <-  approxfun(obs_readings$Date,
obs_readings$Value_trf,
rule = 2, na.rm = TRUE)
get_approx_rate <- function(x) {
# dx get_approx_meter
h <- 1e-6
return((get_approx_meter(x + h) - get_approx_meter(x)) / h)
}
get_avg_temp <- function( df = obs_days, var = "tavg", var_time = "Date",
xmin, xmax) {
f <- approxfun( df[var_time][[1]], df[var][[1]])
integrated <- integrate( f, subdivisions = 10000,
#stop.on.error = FALSE,
rel.tol = 0.1,
lower = xmin, upper = xmax)$value
duration <- xmax - xmin
return( integrated / duration)
}
obs_days <- obs_days %>%
mutate(Meter = get_approx_meter(Date),
Rate = get_approx_rate(Date)*3600*24) %>%
group_by(ywint) %>%
mutate( Spent = Meter - min(Meter, na.rm = TRUE),
Spent_perc = ifelse( year(Date) == act_year,
Spent / 1730,
Spent / max(Spent, na.rm = TRUE)))
# Create a complete date sequence
complete_dates <-
data.frame(Date = seq(from = min(obs_days$Date), to = max(obs_days$Date), by = "day"))
# Step 2: Expand your dataframe by left.join, missings are in NA
obs_days_complete <-
left_join(complete_dates, obs_days,by="Date")
# Fix the missings column by column
for (i in 2:ncol(obs_days_complete)) {  # Starting from 2 to skip the Date column
# Extract dates and values for the current column
dat_act <- obs_days_complete$Date
# handle ywint after numeric transformation
if( colnames(obs_days_complete)[i] == "ywint") {
val <- as.numeric(obs_days_complete[, i])
} else {
val <- obs_days_complete[, i]
}
# Create the interpolation function only for non-NA values
valid_idx <- !is.na(val)
if(sum(valid_idx) > 1) {  # Ensure there are at least two points for interpolation
fun. <- approxfun(x = dat_act[valid_idx], y = val[valid_idx], rule = 2)
# Apply the function to interpolate NA values
obs_days_complete[, i] <- ifelse(is.na(val), fun.(dat_act), val)
}
}
# Cap the tavg at 20
obs_days_complete <- obs_days_complete %>%
arrange(Date) %>%
mutate(tavg_capped = ifelse(tavg < 20, tavg, 20),
tavg_low_cumul = 0)
# Calculate the cumulative heating need as the 'missing' degrees * days
pb <- txtProgressBar(style=3)
for (i in 2:nrow(obs_days_complete)) {
if ( obs_days_complete$day_in_wint[i] >= obs_days_complete$day_in_wint[i-1]) {
obs_days_complete$tavg_low_cumul[i] <-
obs_days_complete$tavg_low_cumul[i - 1] - obs_days_complete$tavg_capped[i] + 20
} else {
# in case of a new year, its automatically zero
obs_days_complete$tavg_low_cumul[i] <- obs_days_complete$tavg_capped[i] - 20
}
setTxtProgressBar(pb,i/nrow(obs_days_complete))
}
close(pb)
# back transforming to factor
obs_days_complete <- obs_days_complete %>%
# # filter current year whose outcome is yet unknown
# filter(ywint != act_ywint) %>%
mutate(ywint = as.factor( ywint))
# didnt observe the first year from the start,results not correct
obs_days_complete$tavg_low_cumul[obs_days_complete$ywint==1] <- NA
# Few obviously wrong values, set to NA (0 heat need at a day in the middle of winter)
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint > 180 &
obs_days_complete$tavg_low_cumul < 100] <- NA
# remove some problematic intrapolated values where day_in_wint is non integer
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint %% 1 != 0] <- NA
# remving NA values so that the model can be fitted easily
obs_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
obs_days_complete <- obs_days_complete %>%
group_by(ywint) %>%
mutate( tavg_low_cum_ratio = tavg_low_cumul /
max(tavg_low_cumul, na.rm = TRUE),
tavgl_left = max(tavg_low_cumul, na.rm = TRUE) - tavg_low_cumul) %>%
ungroup()
tavgcum_exp_sd <- obs_days_complete %>%
group_by(ywint) %>%
filter( day_in_year == max(day_in_year) ) %>%
.$tavg_low_cumul %>%
sd(na.rm = TRUE)
tavgcum_exp <- obs_days_complete %>%
group_by(ywint) %>%
filter( day_in_year == max(day_in_year) ) %>%
.$tavg_low_cumul %>%
mean(na.rm = TRUE)
# now calculate the correlationss per day with the final figure; doesnt work inline for some reason
cors <- rep(NA, 366)
sds <- rep(NA, 366)
for (i in 1:364) {
x <- obs_days_complete %>%
ungroup() %>%
filter(day_in_wint == i,
ywint != act_ywint ) %>%
select(tavgl_left, ywint)
y <- obs_days_complete %>%
group_by(ywint) %>%
filter(ywint != act_ywint ) %>%
filter(day_in_wint == max(day_in_wint)) %>%
select(tavg_low_cumul, ywint)
mat <- left_join(x, y, by = "ywint") %>%
select(-ywint) %>%
as.matrix()
cors[i] <- cor(mat, use = "pairwise.complete.obs")[1,2]
sds[i]  <- sd(mat[,1])
}
obs_days_complete <- obs_days_complete %>%
rowwise() %>%
mutate( tavgcum_cor = cors[round(day_in_wint)+1],
tavgcum_sd  = sds[round(day_in_wint)+1])
mod_tavg_low_cum_mean <- lm( tavgl_left ~ ns(day_in_wint, df = 5),
obs_days_complete)
# check model
mod_tavg_low_cum_mean %>%
effects::predictorEffects(partial.residuals = TRUE) %>%
plot
mod_tavg_low_cum_sd <- lm( tavgcum_sd ~ ns(day_in_wint, df = 11),
obs_days_complete)
# check model
mod_tavg_low_cum_sd %>%
effects::predictorEffects(partial.residuals = TRUE) %>%
plot
# predictions go into new cols in the dataframe
obs_days_complete$tavgl_left_pred     <- predict(mod_tavg_low_cum_mean,
newdata = obs_days_complete)
obs_days_complete$tavgl_left_pred_sd  <- predict(mod_tavg_low_cum_sd,
newdata = obs_days_complete)
# based on the predictions give a predicted 95%CI
obs_days_complete <- obs_days_complete %>%
ungroup() %>%
#rowwise() %>%
mutate( tavgcum_pred_lwr = tavgl_left_pred - 1.96 * tavgl_left_pred_sd,
tavgcum_pred_upr = tavgl_left_pred + 1.96 * tavgl_left_pred_sd,
spent_tavg = Spent / tavg_low_cumul,
gas_left = 1730 - 0.4*(365 - day_in_wint) - Spent,
#tavgcum_left = tavgcum_total_pred - tavg_low_cumul,
spent_tavg_left_mean = gas_left/ (tavgl_left_pred ),
spent_tavg_left_upr = gas_left / (tavgcum_pred_upr),
spent_tavg_left_lwr = gas_left / (tavgcum_pred_lwr)
)
# give january 5 alternative deadline specific line
jan_gasvals <- obs_days_complete %>%
filter(day_in_wint == 157) %>%
select(Meter,Spent,Date)
# Get the m3 remaining if jan 5 was the deadline (<10sec)
obs_days_complete$gas_left_jan <- NA
for (i in 1:nrow(obs_days_complete)) {
act_yr <- year(obs_days_complete$Date[i])
act_last_meter <- jan_gasvals$Meter[act_yr == year(jan_gasvals$Date)]
# If not in first year where no prev. values are present
if (length(act_last_meter) == 1) {
obs_days_complete$gas_left_jan[i] <- 1730 - obs_days_complete$Meter[i] +
act_last_meter
}
}
# Calculate the suggested rate of burn
obs_days_complete <- obs_days_complete %>%
mutate( tavgl_left_jan = predict(mod_tavg_low_cum_mean,
newdata = data.frame(day_in_wint = 157)) -
tavg_low_cumul,
spent_tavg_left_jan = gas_left_jan / (tavgl_left_jan),
)
obs_days_complete %>%
filter(as.numeric(ywint) > 25) %>%
ggplot(aes(x = day_in_wint,
y = spent_tavg,
group = ywint,
color = ywint
)) +
theme_bw() +
geom_line(linewidth=1.5) +
scale_y_continuous(limits = c(-.1, 2))
# start of the heating season
ywint_lim <- 31
date_limits <-
obs_days_complete %>%
filter(ywint == ywint_lim) %>%
arrange(day_in_wint) %>%
.[60, ] %>%
pull(Date) %>%
year() %>%
paste0(.,"-08-01") %>%
as.POSIXct() %>%
rep(.-1, 2)
date_limits[2] <- date_limits[2] + 365*24*3600
obs_days_complete %>%
filter(ywint == ywint_lim) %>%
ggplot(aes(x = Date,
y = spent_tavg,
color = gas_left
)) +
theme_bw() +
# color scale until 0
scale_color_gradient(high = "blue", low = "green"
, limits = c(0,1730)
) +
geom_line(linewidth=1.5) +
geom_line(aes(y = spent_tavg_left_mean), color = "grey50",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y =  spent_tavg_left_lwr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_upr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_jan), color = "salmon4",
linetype="solid", linewidth = 1.2) +
scale_y_continuous(limits = c(0, 1)) +
# date scale (posixct) 1 year
scale_x_datetime(date_breaks = "1 month", date_labels = "%b",
limits = date_limits) +
labs( x = "", y = "Average gas consumption m3/°C")
library(nlme)
library(splines)
source( here::here( "inst", "function", "load_stuff.r"))
merge_transform_weather( data_dir = "inst/extdata/meteostat_data",
gaz_dir  = "inst/extdata/gaz.xlsx",
output_file = "data/meteostat_data.Rdata")
act_year <- 2024
# which is current 'ywint'
act_ywint <- obs_days %>%
ungroup() %>%
mutate(ywint = as.numeric(ywint)) %>%
filter( year(Date) == act_year) %>%
mutate(ywint = max(ywint)) %>%
slice(1) %>%
pull(ywint)
get_approx_meter <-  approxfun(obs_readings$Date,
obs_readings$Value_trf,
rule = 2, na.rm = TRUE)
get_approx_rate <- function(x) {
# dx get_approx_meter
h <- 1e-6
return((get_approx_meter(x + h) - get_approx_meter(x)) / h)
}
get_avg_temp <- function( df = obs_days, var = "tavg", var_time = "Date",
xmin, xmax) {
f <- approxfun( df[var_time][[1]], df[var][[1]])
integrated <- integrate( f, subdivisions = 10000,
#stop.on.error = FALSE,
rel.tol = 0.1,
lower = xmin, upper = xmax)$value
duration <- xmax - xmin
return( integrated / duration)
}
obs_days <- obs_days %>%
mutate(Meter = get_approx_meter(Date),
Rate = get_approx_rate(Date)*3600*24) %>%
group_by(ywint) %>%
mutate( Spent = Meter - min(Meter, na.rm = TRUE),
Spent_perc = ifelse( year(Date) == act_year,
Spent / 1730,
Spent / max(Spent, na.rm = TRUE)))
# Create a complete date sequence
complete_dates <-
data.frame(Date = seq(from = min(obs_days$Date), to = max(obs_days$Date), by = "day"))
# Step 2: Expand your dataframe by left.join, missings are in NA
obs_days_complete <-
left_join(complete_dates, obs_days,by="Date")
# Fix the missings column by column
for (i in 2:ncol(obs_days_complete)) {  # Starting from 2 to skip the Date column
# Extract dates and values for the current column
dat_act <- obs_days_complete$Date
# handle ywint after numeric transformation
if( colnames(obs_days_complete)[i] == "ywint") {
val <- as.numeric(obs_days_complete[, i])
} else {
val <- obs_days_complete[, i]
}
# Create the interpolation function only for non-NA values
valid_idx <- !is.na(val)
if(sum(valid_idx) > 1) {  # Ensure there are at least two points for interpolation
fun. <- approxfun(x = dat_act[valid_idx], y = val[valid_idx], rule = 2)
# Apply the function to interpolate NA values
obs_days_complete[, i] <- ifelse(is.na(val), fun.(dat_act), val)
}
}
# Cap the tavg at 20
obs_days_complete <- obs_days_complete %>%
arrange(Date) %>%
mutate(tavg_capped = ifelse(tavg < 20, tavg, 20),
tavg_low_cumul = 0)
# Calculate the cumulative heating need as the 'missing' degrees * days
pb <- txtProgressBar(style=3)
for (i in 2:nrow(obs_days_complete)) {
if ( obs_days_complete$day_in_wint[i] >= obs_days_complete$day_in_wint[i-1]) {
obs_days_complete$tavg_low_cumul[i] <-
obs_days_complete$tavg_low_cumul[i - 1] - obs_days_complete$tavg_capped[i] + 20
} else {
# in case of a new year, its automatically zero
obs_days_complete$tavg_low_cumul[i] <- obs_days_complete$tavg_capped[i] - 20
}
setTxtProgressBar(pb,i/nrow(obs_days_complete))
}
close(pb)
# back transforming to factor
obs_days_complete <- obs_days_complete %>%
# # filter current year whose outcome is yet unknown
# filter(ywint != act_ywint) %>%
mutate(ywint = as.factor( ywint))
# didnt observe the first year from the start,results not correct
obs_days_complete$tavg_low_cumul[obs_days_complete$ywint==1] <- NA
# Few obviously wrong values, set to NA (0 heat need at a day in the middle of winter)
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint > 180 &
obs_days_complete$tavg_low_cumul < 100] <- NA
# remove some problematic intrapolated values where day_in_wint is non integer
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint %% 1 != 0] <- NA
# remving NA values so that the model can be fitted easily
obs_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
obs_days_complete <- obs_days_complete %>%
group_by(ywint) %>%
mutate( tavg_low_cum_ratio = tavg_low_cumul /
max(tavg_low_cumul, na.rm = TRUE),
tavgl_left = max(tavg_low_cumul, na.rm = TRUE) - tavg_low_cumul) %>%
ungroup()
tavgcum_exp_sd <- obs_days_complete %>%
group_by(ywint) %>%
filter( day_in_year == max(day_in_year) ) %>%
.$tavg_low_cumul %>%
sd(na.rm = TRUE)
tavgcum_exp <- obs_days_complete %>%
group_by(ywint) %>%
filter( day_in_year == max(day_in_year) ) %>%
.$tavg_low_cumul %>%
mean(na.rm = TRUE)
# now calculate the correlationss per day with the final figure; doesnt work inline for some reason
cors <- rep(NA, 366)
sds <- rep(NA, 366)
for (i in 1:364) {
x <- obs_days_complete %>%
ungroup() %>%
filter(day_in_wint == i,
ywint != act_ywint ) %>%
select(tavgl_left, ywint)
y <- obs_days_complete %>%
group_by(ywint) %>%
filter(ywint != act_ywint ) %>%
filter(day_in_wint == max(day_in_wint)) %>%
select(tavg_low_cumul, ywint)
mat <- left_join(x, y, by = "ywint") %>%
select(-ywint) %>%
as.matrix()
cors[i] <- cor(mat, use = "pairwise.complete.obs")[1,2]
sds[i]  <- sd(mat[,1])
}
obs_days_complete <- obs_days_complete %>%
rowwise() %>%
mutate( tavgcum_cor = cors[round(day_in_wint)+1],
tavgcum_sd  = sds[round(day_in_wint)+1])
mod_tavg_low_cum_mean <- lm( tavgl_left ~ ns(day_in_wint, df = 5),
obs_days_complete)
# check model
mod_tavg_low_cum_mean %>%
effects::predictorEffects(partial.residuals = TRUE) %>%
plot
mod_tavg_low_cum_sd <- lm( tavgcum_sd ~ ns(day_in_wint, df = 11),
obs_days_complete)
# check model
mod_tavg_low_cum_sd %>%
effects::predictorEffects(partial.residuals = TRUE) %>%
plot
# predictions go into new cols in the dataframe
obs_days_complete$tavgl_left_pred     <- predict(mod_tavg_low_cum_mean,
newdata = obs_days_complete)
obs_days_complete$tavgl_left_pred_sd  <- predict(mod_tavg_low_cum_sd,
newdata = obs_days_complete)
# based on the predictions give a predicted 95%CI
obs_days_complete <- obs_days_complete %>%
ungroup() %>%
#rowwise() %>%
mutate( tavgcum_pred_lwr = tavgl_left_pred - 1.96 * tavgl_left_pred_sd,
tavgcum_pred_upr = tavgl_left_pred + 1.96 * tavgl_left_pred_sd,
spent_tavg = Spent / tavg_low_cumul,
gas_left = 1730 - 0.4*(365 - day_in_wint) - Spent,
#tavgcum_left = tavgcum_total_pred - tavg_low_cumul,
spent_tavg_left_mean = gas_left/ (tavgl_left_pred ),
spent_tavg_left_upr = gas_left / (tavgcum_pred_upr),
spent_tavg_left_lwr = gas_left / (tavgcum_pred_lwr)
)
# give january 5 alternative deadline specific line
jan_gasvals <- obs_days_complete %>%
filter(day_in_wint == 157) %>%
select(Meter,Spent,Date)
# Get the m3 remaining if jan 5 was the deadline (<10sec)
obs_days_complete$gas_left_jan <- NA
for (i in 1:nrow(obs_days_complete)) {
act_yr <- year(obs_days_complete$Date[i])
act_last_meter <- jan_gasvals$Meter[act_yr == year(jan_gasvals$Date)]
# If not in first year where no prev. values are present
if (length(act_last_meter) == 1) {
obs_days_complete$gas_left_jan[i] <- 1730 - obs_days_complete$Meter[i] +
act_last_meter
}
}
# Calculate the suggested rate of burn
obs_days_complete <- obs_days_complete %>%
mutate( tavgl_left_jan = predict(mod_tavg_low_cum_mean,
newdata = data.frame(day_in_wint = 157)) -
tavg_low_cumul,
spent_tavg_left_jan = gas_left_jan / (tavgl_left_jan),
)
obs_days_complete %>%
filter(as.numeric(ywint) > 25) %>%
ggplot(aes(x = day_in_wint,
y = spent_tavg,
group = ywint,
color = ywint
)) +
theme_bw() +
geom_line(linewidth=1.5) +
scale_y_continuous(limits = c(-.1, 2))
# start of the heating season
ywint_lim <- 31
date_limits <-
obs_days_complete %>%
filter(ywint == ywint_lim) %>%
arrange(day_in_wint) %>%
.[60, ] %>%
pull(Date) %>%
year() %>%
paste0(.,"-08-01") %>%
as.POSIXct() %>%
rep(.-1, 2)
date_limits[2] <- date_limits[2] + 365*24*3600
obs_days_complete %>%
filter(ywint == ywint_lim) %>%
ggplot(aes(x = Date,
y = spent_tavg,
color = gas_left
)) +
theme_bw() +
# color scale until 0
scale_color_gradient(high = "blue", low = "green"
, limits = c(0,1730)
) +
geom_line(linewidth=1.5) +
geom_line(aes(y = spent_tavg_left_mean), color = "grey50",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y =  spent_tavg_left_lwr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_upr), color = "grey70",
linetype="dashed", linewidth = 1.2) +
geom_line(aes(y = spent_tavg_left_jan), color = "salmon4",
linetype="solid", linewidth = 1.2) +
scale_y_continuous(limits = c(0, 1)) +
# date scale (posixct) 1 year
scale_x_datetime(date_breaks = "1 month", date_labels = "%b",
limits = date_limits) +
labs( x = "", y = "Average gas consumption m3/°C")
View(obs_days_complete)
