y = Value_trf),
color = "red") +
labs(y = "Amount gas used (m3)",
x = "Date")
obs_hours <- obs_hours %>%
mutate(Meter = get_approx_meter(Date),
Rate = get_approx_rate(Date)*3600*24) %>%
group_by(ywint) %>%
mutate( Spent = Meter - min(Meter, na.rm = TRUE),
Spent_perc = ifelse( year(Date) == act_year,
Spent / 1730,
Spent / max(Spent, na.rm = TRUE)))
# Day-in_year, spent percent graph, based on days
fig_dayinyear_days <-
obs_days %>%
filter(is.na(Spent_perc) == FALSE) %>%
ggplot( aes( x = day_in_year, y = Spent_perc,
group = ywint,
color = ywint)) +
theme_bw() +
scale_x_continuous(breaks = c(0,90,180,270,365)) +
geom_point()
# Day-in_year, spent percent graph, based on hours (takes longer)
fig_dayinyear_hours <-
obs_hours %>%
filter(is.na(Spent_perc) == FALSE) %>%
ggplot( aes( x = day_in_year, y = Spent_perc,
group = ywint,
color = ywint)) +
theme_bw() +
scale_x_continuous(breaks = c(0,90,180,270,365)) +
geom_point()
# arrange so that the two plots can be compared (not much diff.)
fig_compare_day_hours_spentperc <-
ggpubr::ggarrange(fig_dayinyear_days,fig_dayinyear_hours,nrow = 2)
# Create a complete date sequence
complete_dates <-
data.frame(Date = seq(from = min(obs_days$Date), to = max(obs_days$Date), by = "day"))
# Step 2: Expand your dataframe by left.join, missings are in NA
obs_days_complete <-
left_join(complete_dates, obs_days,by="Date")
# Fix the missings column by column
for (i in 2:ncol(obs_days_complete)) {  # Starting from 2 to skip the Date column
# Extract dates and values for the current column
dat_act <- obs_days_complete$Date
# handle ywint after numeric transformation
if( colnames(obs_days_complete)[i] == "ywint") {
val <- as.numeric(obs_days_complete[, i])
} else {
val <- obs_days_complete[, i]
}
# Create the interpolation function only for non-NA values
valid_idx <- !is.na(val)
if(sum(valid_idx) > 1) {  # Ensure there are at least two points for interpolation
fun. <- approxfun(x = dat_act[valid_idx], y = val[valid_idx], rule = 2)
# Apply the function to interpolate NA values
obs_days_complete[, i] <- ifelse(is.na(val), fun.(dat_act), val)
}
}
# Cap the tavg at 20
obs_days_complete <- obs_days_complete %>%
arrange(Date) %>%
mutate(tavg_capped = ifelse(tavg < 20, tavg, 20),
tavg_low_cumul = 0)
# Calculate the cumulative heating need as the 'missing' degrees * days
pb <- txtProgressBar(style=3)
for (i in 2:nrow(obs_days_complete)) {
if ( obs_days_complete$day_in_wint[i] >= obs_days_complete$day_in_wint[i-1]) {
obs_days_complete$tavg_low_cumul[i] <-
obs_days_complete$tavg_low_cumul[i - 1] - obs_days_complete$tavg_capped[i] + 20
} else {
# in case of a new year, its automatically zero
obs_days_complete$tavg_low_cumul[i] <- obs_days_complete$tavg_capped[i] - 20
}
setTxtProgressBar(pb,i/nrow(obs_days_complete))
}
close(pb)
plot(obs_days_complete$tavg_low_cumul)
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint > 180 &
obs_days_complete$tavg_low_cumul < 100]
plot(obs_days_complete$tavg_low_cumul)
# didnt observe the first year from the start,results not correct
obs_days_complete$tavg_low_cumul[obs_days_complete$ywint==1] <- NA
plot(obs_days_complete$tavg_low_cumul)
plot(obs_days_complete$day_in_wint)
obs_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul
)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,fill=year
,group = factor(ywint))) +
labs( x = "Day in the season (starts Aug.1st)",
y = "'Missing degrees until 20' x Days ")
# takes a bit long
fig_heatneed_per_year <-
obs_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul
)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,fill=year
,group = factor(ywint))) +
labs( x = "Day in the season (starts Aug.1st)",
y = "'Missing degrees until 20' x Days ")
fig_heatneed_per_year
library(lme4)
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
obs_days_complete,
weights=varExp(form = ~ day_in_wint),
na.action = na.omit)
library(splines)
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
obs_days_complete,
weights=varExp(form = ~ day_in_wint),
na.action = na.omit)
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
obs_days_complete,
na.action = na.omit)
plot8mod_cum
plot(mod_cum)
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
obs_days_complete,
control = lmerControl(optimizer = "boby"))
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
obs_days_complete,
control = lmerControl(optimizer = "bobyqa"))
summary(mod_cum)
obs_days_complete$predlme <- predict(mod_cum, re.form = ~ 0)
is.na(obs_days_complete$tavg_low_cumul)
sum(is.na(obs_days_complete$tavg_low_cumul))
View(obs_days_complete)
dat_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
library(dplyr)
dat_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
mod_cum <- lmer(tavg_low_cumul ~ ns(day_in_wint,df=8) + (day_in_wint|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
summary(mod_cum)
dat_days_complete$predlme <- predict(mod_cum, re.form = ~ 0)
dat_days_complete$predlme <- predict(mod_cum, re.form = NA)
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul
)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,fill=year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
library(ggplot2)
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul
)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,fill=year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
ranef(mod_cum)
ranef(mod_cum)%>%plot()
dat_days_complete$predlme <- predict(mod_cum, re.form = ~0)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
dat_days_complete$predlme <- predict(mod_cum)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
plot(mod_cum)
mod_cum <- lmer(tavg_low_cumul ~
ns(day_in_wint,df=6)
+ (ns(day_in_wint,df=2)|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
summary(mod_cum)
dat_days_complete$predlme <- predict(mod_cum)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
plot(mod_cum)
plot(mod_cum,type="l")
library(splines2)
splines2::cSpline()
mod_cum <- lmer(tavg_low_cumul ~
cSpline(day_in_wint,df=6)
+ (cSpline(day_in_wint,df=2)|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
mod_cum <- lmer(tavg_low_cumul ~
cSpline(day_in_wint,df=6)
+ (ns(day_in_wint,df=2)|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
plot(mod_cum)
dat_days_complete$predlme <- predict(mod_cum)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1.5)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
mod_cum <- lmer(tavg_low_cumul ~
cSpline(day_in_wint,df=6)
+ (ns(day_in_wint,df=1)|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
plot(mod_cum)
splines2::iSpline()
mod_cum <- lmer(tavg_low_cumul ~
csp(day_in_wint,df=6)
+ (ns(day_in_wint,df=1)|ywint),
dat_days_complete,
control = lmerControl(optimizer = "bobyqa"))
plot(mod_cum)
summary(mod_cum)
dat_days_complete$predlme <- predict(mod_cum)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul, group = ywint)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul, group = ywint)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint)))
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint, bs="cr") + s(year, bs="re"),
family = poisson(link = "log"), data = data)
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint, bs="cr") + s(year, bs="re"),
family = poisson(link = "log"), data = dat_days_complete)
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint, bs="cr") + s(year, bs="re"),
family = poisson(link = "log"), data = dat_days_complete)
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint) + s(year, bs="re"),
family = poisson(link = "log"), data = dat_days_complete)
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint) + s(year, bs="re"),
family = poisson(link = "log"), data = dat_days_complete)
library(gam)
model <- gam(tavg_low_cumul ~ s(day_in_wint) + s(year),
family = poisson(link = "log"), data = dat_days_complete)
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year, data = dat_days_complete)
library(nlme)
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year, data = dat_days_complete)
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year, data = dat_days_complete)
library(nlme)
# Convert the data to a groupedData object
dat_days_complete_grouped <- groupedData(tavg_low_cumul ~ day_in_wint | year, data = dat_days_complete)
# Fit the nonlinear mixed-effects model
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year,
data = dat_days_complete_grouped)
# Summary of the model
summary(model)
mod_cum <- model
dat_days_complete$predlme <- predict(mod_cum)
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul, group = ywint)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
plot(model)
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul, group = ywint)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
model$resid
which(model$resid==max(model$resid))
View(dat_days_complete)
plot(model)
dat_days_complete$resid  <- resid(model)
library(nlme)
library(splines)
source( here::here( "inst", "function", "load_stuff.r"))
act_year <- 2023
get_approx_meter <-  approxfun(obs_readings$Date,
obs_readings$Value_trf,
rule = 2, na.rm = TRUE)
get_approx_rate <- function(x) {
# dx get_approx_meter
h <- 1e-6
return((get_approx_meter(x + h) - get_approx_meter(x)) / h)
}
get_avg_temp <- function( df = obs_days, var = "tavg", var_time = "Date",
xmin, xmax) {
f <- approxfun( df[var_time][[1]], df[var][[1]])
integrated <- integrate( f, subdivisions = 10000,
#stop.on.error = FALSE,
rel.tol = 0.1,
lower = xmin, upper = xmax)$value
duration <- xmax - xmin
return( integrated / duration)
}
obs_days <- obs_days %>%
mutate(Meter = get_approx_meter(Date),
Rate = get_approx_rate(Date)*3600*24) %>%
group_by(ywint) %>%
mutate( Spent = Meter - min(Meter, na.rm = TRUE),
Spent_perc = ifelse( year(Date) == act_year,
Spent / 1730,
Spent / max(Spent, na.rm = TRUE)))
date_min <- as.numeric(min(obs_readings$Date, na.rm = TRUE))
date_max <- as.numeric(max(obs_readings$Date, na.rm = TRUE))
appfun <- data.frame(
date_series = seq(date_min,date_max, length.out = 1000) %>%
as_datetime(),
out_series = NA) %>%
mutate( out_series = get_approx_meter(date_series))
# figure exploring approx.fun
fig_approxfun_gascons <-
appfun %>%
ggplot(aes(x=date_series,y=out_series)) +
theme_bw() +
geom_line() +
geom_point(data = obs_readings,
mapping = aes(x = Date,
y = Value_trf),
color = "red") +
labs(y = "Amount gas used (m3)",
x = "Date")
obs_hours <- obs_hours %>%
mutate(Meter = get_approx_meter(Date),
Rate = get_approx_rate(Date)*3600*24) %>%
group_by(ywint) %>%
mutate( Spent = Meter - min(Meter, na.rm = TRUE),
Spent_perc = ifelse( year(Date) == act_year,
Spent / 1730,
Spent / max(Spent, na.rm = TRUE)))
# Day-in_year, spent percent graph, based on days
fig_dayinyear_days <-
obs_days %>%
filter(is.na(Spent_perc) == FALSE) %>%
ggplot( aes( x = day_in_year, y = Spent_perc,
group = ywint,
color = ywint)) +
theme_bw() +
scale_x_continuous(breaks = c(0,90,180,270,365)) +
geom_point()
# Day-in_year, spent percent graph, based on hours (takes longer)
fig_dayinyear_hours <-
obs_hours %>%
filter(is.na(Spent_perc) == FALSE) %>%
ggplot( aes( x = day_in_year, y = Spent_perc,
group = ywint,
color = ywint)) +
theme_bw() +
scale_x_continuous(breaks = c(0,90,180,270,365)) +
geom_point()
# arrange so that the two plots can be compared (not much diff.)
fig_compare_day_hours_spentperc <-
ggpubr::ggarrange(fig_dayinyear_days,fig_dayinyear_hours,nrow = 2)
# Create a complete date sequence
complete_dates <-
data.frame(Date = seq(from = min(obs_days$Date), to = max(obs_days$Date), by = "day"))
# Step 2: Expand your dataframe by left.join, missings are in NA
obs_days_complete <-
left_join(complete_dates, obs_days,by="Date")
# Fix the missings column by column
for (i in 2:ncol(obs_days_complete)) {  # Starting from 2 to skip the Date column
# Extract dates and values for the current column
dat_act <- obs_days_complete$Date
# handle ywint after numeric transformation
if( colnames(obs_days_complete)[i] == "ywint") {
val <- as.numeric(obs_days_complete[, i])
} else {
val <- obs_days_complete[, i]
}
# Create the interpolation function only for non-NA values
valid_idx <- !is.na(val)
if(sum(valid_idx) > 1) {  # Ensure there are at least two points for interpolation
fun. <- approxfun(x = dat_act[valid_idx], y = val[valid_idx], rule = 2)
# Apply the function to interpolate NA values
obs_days_complete[, i] <- ifelse(is.na(val), fun.(dat_act), val)
}
}
# Cap the tavg at 20
obs_days_complete <- obs_days_complete %>%
arrange(Date) %>%
mutate(tavg_capped = ifelse(tavg < 20, tavg, 20),
tavg_low_cumul = 0)
# Calculate the cumulative heating need as the 'missing' degrees * days
pb <- txtProgressBar(style=3)
for (i in 2:nrow(obs_days_complete)) {
if ( obs_days_complete$day_in_wint[i] >= obs_days_complete$day_in_wint[i-1]) {
obs_days_complete$tavg_low_cumul[i] <-
obs_days_complete$tavg_low_cumul[i - 1] - obs_days_complete$tavg_capped[i] + 20
} else {
# in case of a new year, its automatically zero
obs_days_complete$tavg_low_cumul[i] <- obs_days_complete$tavg_capped[i] - 20
}
setTxtProgressBar(pb,i/nrow(obs_days_complete))
}
close(pb)
# back transforming to factor
obs_days_complete <- obs_days_complete %>%
mutate(ywint = as.factor( ywint))
# didnt observe the first year from the start,results not correct
obs_days_complete$tavg_low_cumul[obs_days_complete$ywint==1] <- NA
# Few obviously wrong values, set to NA (0 heat need at a day in the middle of winter)
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint > 180 &
obs_days_complete$tavg_low_cumul < 100] <- NA
# remove some problematic intrapolated values where day_in_wint is non integer
obs_days_complete$tavg_low_cumul[obs_days_complete$day_in_wint %% 1 != 0] <- NA
# remving NA values so that the model can be fitted easily
obs_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
fig_heatneed_per_year <-
obs_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul
)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,fill=year
,group = factor(ywint))) +
labs( x = "Day in the season (starts Aug.1st)",
y = "'Missing degrees until 20' x Days ")
library(lme4)
dat_days_complete <- obs_days_complete %>% filter(is.na(tavg_low_cumul) == FALSE)
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year, data = dat_days_complete)
library(nlme)
# Convert the data to a groupedData object
dat_days_complete_grouped <- groupedData(tavg_low_cumul ~ day_in_wint | year, data = dat_days_complete)
# Fit the nonlinear mixed-effects model
model <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year,
data = dat_days_complete_grouped)
# Summary of the model
summary(model)
plot(model)
dat_days_complete$predlme <- predict(mod_cum)
mod_cum <- model
dat_days_complete$predlme <- predict(mod_cum)
# plot
dat_days_complete %>%
ggplot(aes(x = day_in_wint, y = tavg_low_cumul, group = ywint)) +
theme_bw() +
geom_line(alpha=.7, mapping = aes(
color = year
,group = factor(ywint))) +
geom_line(mapping = aes(y = predlme),color='salmon4',linewidth=1)
library(boot)
# Define a function to refit the model on a resampled dataset
boot_model <- function(data, indices) {
d <- data[indices, ]
mod <- nlme(tavg_low_cumul ~ SSlogis(day_in_wint, Asym, xmid, scal),
random = Asym ~ 1 | year,
data = d)
predict(mod, newdata = new_data)
}
# Perform the bootstrap (e.g., 1000 resamples)
set.seed(123)  # For reproducibility
boot_results <- boot(dat_days_complete, boot_model, R = 1000)
boot_results <- boot(dat_days_complete_groupped, boot_model, R = 1000)
View(dat_days_complete_grouped)
boot_results <- boot(dat_days_complete_grouped, boot_model, R = 10)
boot_results <- boot(dat_days_complete_grouped, boot_model, R = 100)
new_data <- data.frame(day_in_wint = seq(1, 365, by = 1)) # new year prediction over 365 days
boot_results <- boot(dat_days_complete_grouped, boot_model, R = 100)
