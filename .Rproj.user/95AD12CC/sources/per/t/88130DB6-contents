# These are some good old fashioned analyses based on the available transformed data

library(splines)
library(ggplot2)

source( here::here( "data_transforms.r"))

yday_inverse <- function( day_in_year, yr = 2022) {
  
  require(lubridate)
  require(dplyr)
  
  # converting to character, in order to the parser to work
  if ( typeof(day_in_year) != "character") {
    day_in_year <- as.character( day_in_year)
  }
  
  parse_date_time(x = paste(yr, day_in_year), orders = "yj") %>% 
    as.Date %>% 
      return()

}

day_in_wint_to_yday <- function( day_in_wint) {
  # day_in_wint is a synthetic variable spanning from august to august
  
}

USED_UP <-  last(
  gaz_rendetlen$Value[nrow(gaz_rendetlen)] -
    gaz_rendetlen$Value[gaz_rendetlen$Date  < "2022-08-01 0:00"])

KEDV_HATRA <- 1730 - USED_UP

# curves based on daily avg. temp
fig_1 <- temps_xtra %>%
  filter( is.na(Rate) == FALSE) %>%
  mutate( ywint = ywint  %>% droplevels()) %>%
  ggplot( aes( x = tavg, 
               y = Rate, 
               fill = as.factor(ywint), 
               color = as.factor(ywint))) +
  theme_bw() +
  geom_point( alpha = .05) +
  geom_smooth(se = FALSE, size = 2,
              method = 'gam',
              formula = y ~ s(x, bs = "tp"))


# curves based on hourly simulated temp
fig_2 <- temps_xtra %>%
  filter( is.na(Rate) == FALSE) %>%
  mutate( ywint = ywint  %>% droplevels()) %>%
  filter(tact < 20) %>%
  ggplot( aes( x = tact, 
               y = Rate, 
               fill = as.factor(ywint), 
               color = as.factor(ywint))) +
  theme_bw() +
  geom_point( alpha = .05)  +
  geom_smooth(se = FALSE, size = 2,
              method = 'gam',
              formula = y ~ s(x, bs = "tp"))


# filtering out the winter we went to Australia
# and handling warm days
temps_xtra_nice <- temps_xtra %>%
  filter( ywint != "2019" |
          tact > 10) %>%
  mutate( heat_off = 
    ifelse( day_in_year > 258 |
              day_in_year < 135,  "on", "off")
    #ifelse(  tavg > 20, "off", "on") %>% as.factor
    )


# creating a lm
mod <- lm( Rate ~ (tact * ns(day_in_wint, df = 3)) #* heat_off 
           ,temps_xtra_nice)

# summary(mod)

# plot(mod)
# acf(resid(mod),lag=1500)
# mod %>% effects::predictorEffects() %>% plot
# car::vif(mod, type = 'predictor')

# yday("2022-05-15")
# yday("2022-09-15")
preds <- expand.grid( hours_dat = 0:23,
                     day_in_year = 1:365,
                     id = max(temps_xtra_nice$id)) %>%
            mutate( heat_off = ifelse( day_in_year > 258 |
                                        day_in_year < 135,  "on", "off"),
                    date_good = yday_inverse(day_in_year),
                    day_in_wint = ifelse( day_in_year < 213, 
                                          day_in_year + 152, #?!?dont know why it works (365-213?) 
                                          day_in_year - 213)
                    ) %>%
            # doing this in 2 steps in order to make it more readable
            mutate( date_good = ifelse( date_good < as.Date("2022-08-01"), 
                                        date_good + years(1),
                                        date_good) %>% as_date,
                    # alternative parameterization of day in season
                    dwint_2 = abs( (day_in_wint - 182.5) / 182.5)
                    ) %>%
  group_by( hours_dat, day_in_year) %>%
  slice(1)

# Getting the 'average' temperatures along with their pred. interval
preds <- 
  preds %>%
    cbind( ., predict(mod_temp, 
                      newdata = preds, # sin(x) = .5 
                      interval = "prediction") %>%
             `colnames<-`(c( "tact", 
                             "tact_min", 
                             "tact_max" ))) 


# Getting predicted gas usage from the realized temperatures as well
pred_realiz <- data %>%
  filter( Date < today(),
          Date > as_date("2022-08-31"),
          tavg < 20) %>% 
  mutate(
         tact = tavg,
         day_in_wint = ifelse( day_in_year < 213, 
                               day_in_year + 152, #?!?dont know why it works (365-213?) 
                               day_in_year - 213))
pred_realiz$gas <- predict( mod, newdata = pred_realiz)
pred_realiz$gasconsumption_difference <- with(pred_realiz, Rate - gas)

preds$gas <- predict( mod, newdata = preds)
preds$gas[preds$heat_off == "off"] <- .6 # has to be adjusted, model is dead wrong, prev. use .4

correction <- 2500 / sum(preds$gas/24)

preds$gas_corr <- preds$gas * correction

# predicted to be used up until this point based on mean temperatures
preduse <- preds$gas[preds$date_good < today()& 
                          preds$date_good > as_date("2022-08-31")
                          ] %>% 
  sum() %>% 
  `/`(24)

preduse_corr <- preds$gas_corr[preds$date_good < today()& 
                       preds$date_good > as_date("2022-08-31")
] %>% 
  sum() %>% 
  `/`(24)


const_0 <- KEDV_HATRA / (sum(preds$gas_corr/24) - preduse_corr)
const_5 <- KEDV_HATRA * .95 / (sum(preds$gas_corr/24) - preduse_corr)
const_10 <- KEDV_HATRA * .90 / (sum(preds$gas_corr/24) - preduse_corr)
const_15 <- KEDV_HATRA * .85 / (sum(preds$gas_corr/24) - preduse_corr)
const_20 <- KEDV_HATRA * .80 / (sum(preds$gas_corr/24) - preduse_corr)

preds <- preds %>%
  mutate(
    gas_0  = gas * const_0
    ,gas_5  = gas * const_5
    ,gas_10 = gas * const_10
    ,gas_15 = gas * const_15
    ,gas_20 = gas * const_20
  ) %>%
  #rowwise() %>%
  mutate(
    
    # date_good = (parse_date_time(x = as.character(day_in_wint), orders = "j") 
    #              + days(180)) %>% as.Date,
    month = month(date_good) 
    ) %>%
  left_join( ., y = jelleggorb, by = "month") 

# dont know why but have to do this in 2 steps
preds <- preds %>%
  mutate(
    jelleg = amount / days_in_month( month)
  )
    
# This is to gauge our performance up to this point in time
preduse_targ <- preds$gas_0[preds$date_good < today()& 
                                 preds$date_good > as_date("2022-08-31")
] %>% 
  sum() %>% 
  `/`(24)


dates_when_cold <-  
  data %>%
    filter( Date < today(),
            Date > as_date("2022-08-31"),
            tavg < 20) %>%
    .$Date

TEMP_DIFF <-
  # temp. diff compared to the expected
  (# average realized temperature up to this point, when under 20 C
    data %>%
      filter( Date %in% dates_when_cold) %>%
      .$tavg %>%
      mean( na.rm = TRUE)
    -
      # average temperature up to this point, when in the set above
      preds %>%
        filter( date_good %in% as_date(dates_when_cold)) %>%
      .$tact %>%
      mean( na.rm = TRUE)
  )

preds_day <- preds %>%
  group_by(day_in_year) %>%
  mutate( 
    across(  .cols = c("tact", "tact_min", "tact_max", "gas", "gas_corr", "gas_0", "gas_5", "gas_10",
                       "gas_15", "gas_20"), .fns = mean)
          ) %>%
  slice(1)


fig_3 <- preds_day %>%
  ggplot( aes( x = date_good, y = gas_0)) +
  theme_bw() +
  geom_line(color = "salmon4", size = 1.5) +
  geom_line(mapping = aes(y = gas_5), color = "grey85", size = 1) +
  geom_line(mapping = aes(y = gas_10), color = "grey80", size = 1) +
  geom_line(mapping = aes(y = gas_15), color = "grey50", size = 1) +
  geom_line(mapping = aes(y = gas_20), color = "grey85", size = 1) +
  scale_x_date(breaks = "7 weeks", limits = c(as.Date("2022-08-01"),as.Date("2023-08-01"))) +
  scale_y_continuous( breaks = c(.2,2:10), limits = c(0,15)) +
  labs( x = "", y = "Gázfogyasztás; m3/nap") +
  annotate(geom="text", x=as.Date("2023-06-01"), y=4.5, label="1730 m3/év",
           color="salmon4") +
  annotate(geom="text", x=as.Date("2023-06-20"), y=4.1, label="5% margin: 1645 m3/év",
           color="grey65") +
  annotate(geom="text", x=as.Date("2023-06-20"), y=3.7, label="10% margin: 1555 m3/év",
           color="grey60") +
  annotate(geom="text", x=as.Date("2023-06-20"), y=3.3, label="15% margin: 1470 m3/év",
           color="grey40") +
  annotate(geom="text", x=as.Date("2023-06-20"), y=2.9, label="20% margin: 1385 m3/év",
           color="grey70") +
  geom_line( mapping = aes(y = jelleg), color = "green", alpha = .5) +
  # Inserting the realization of gas consumption
  geom_point( mapping = aes( x = as.Date(Date), y = Rate), data = gaz,
              color = "navy", size = .8, alpha = .99) +
  geom_line(mapping = aes( x = as.Date(Date), y = Rate), data = gaz,
            color = "navy", size = .95)


fig_4 <- preds_day %>%
  ggplot( aes( x = date_good, y = tact)) +
  theme_bw() +
  geom_line(color = "salmon4", size = 1.5) +
  # Inserting the realization of the temp. data so far
  geom_point( mapping = aes( x = as.Date(Date), y = tavg), data = data,
              color = "lightblue", size = 1, alpha = .7) +
  geom_line(mapping = aes( x = as.Date(Date), y = tavg), data = data,
            color = "lightblue", size = .95) +
  geom_line( mapping = aes( x = date_good, y = tact_min )) + 
  geom_line( mapping = aes( x = date_good, y = tact_max )) + 
  geom_vline( xintercept = today(), color = "red", linetype = "dashed") +
  # geom_line( data = weather %>%
  #                     mutate( Date = `year<-`(Date, 2022)),
  #            mapping = aes( x = Date, y = tavg )) +
  geom_smooth( mapping = aes( x = as.Date(Date %>% as_date), y = tavg), data = data,
               color = "pink", size = .95, se = FALSE) +
  scale_x_date(breaks = "7 weeks", 
               limits = c(as.Date("2022-08-01"),
                          as.Date("2023-08-01")))
  


# Alternative approach, "guaranteed" no autocorrelation

mod_b <- lm( Rate ~ 
             (
               ns( tact, df = 1) 
               #+ ns(dtmn, df = 2)
             )
           #+ heat_off
           + ywint
           , 
           gaz_rendetlen)

fig_5_ojj <- mod_b %>% effects::predictorEffects( residuals = TRUE)

nd <- expand.grid( tact = seq(0,20,.1),
                   ywint = gaz_rendetlen$ywint[nrow(gaz_rendetlen)])
nd$pred <- predict( mod_b, newdata = nd)

fig_6 <- preds_day %>%
  ggplot( aes( x = tact, y = gas)) +
  theme_bw() +
  geom_line( color = "salmon") +
  geom_line( mapping = aes( x = tact, y = pred), data = nd, color = "blue") +
  labs( caption = "Comparing two models; blue is virtually guaranteed to have no autocorrelation")

save.image( file = "iter6_mods.rdata")
